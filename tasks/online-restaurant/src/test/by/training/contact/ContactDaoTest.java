package by.training.contact;

import by.training.dao.ConnectionManager;
import by.training.dao.DaoException;
import org.junit.*;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;
import org.mockito.Mockito;

import java.lang.reflect.Proxy;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.List;
import java.util.Optional;

@RunWith(JUnit4.class)
public class ContactDaoTest {
    private static Connection connection;
    private ContactDao contactDao;

    @BeforeClass
    public static void initConnection() throws SQLException {
        connection =
                DriverManager.getConnection("jdbc:hsqldb:mem:restaurant_db", "test", "test");
    }

    @AfterClass
    public static void closeConnection() throws SQLException {
        connection.close();
    }

    @Before
    public void createTable() throws SQLException {
        ConnectionManager mockConnectionManager = Mockito.mock(ConnectionManager.class);
        contactDao = new ContactDaoImpl(mockConnectionManager);
        Mockito.when(mockConnectionManager.getConnection()).thenReturn(createConnectionProxy(connection));
        String createTable = "CREATE TABLE user_contact (\n" +
                "  contact_id BIGINT GENERATED BY DEFAULT AS IDENTITY(START WITH 1, INCREMENT BY 1) PRIMARY KEY,\n" +
                "  first_name varchar(150) NOT NULL,\n" +
                "  last_name varchar(150) NOT NULL,\n" +
                "  phone varchar(150) NOT NULL,\n" +
                "  email varchar(150) NOT NULL,\n" +
                "  user_id BIGINT NOT NULL,\n" +
                ")";
        executeSql(createTable);

        String insertContact1 = "insert into user_contact (first_name, last_name, phone, email, user_id) " +
                "values ('Maxim', 'Chechetkin', '123', 'mail', 15)";
        executeSql(insertContact1);

        String insertContact2 = "insert into user_contact (first_name, last_name, phone, email, user_id) " +
                "values ('Anton', 'Chechetkin', '321', 'milo', 31)";
        executeSql(insertContact2);

        String insertContact3 = "insert into user_contact (first_name, last_name, phone, email, user_id) " +
                "values ('Maxim', 'Fedorov', '4124', 'pochta', 15)";
        executeSql(insertContact3);

        String insertContact4 = "insert into user_contact (first_name, last_name, phone, email, user_id) " +
                "values ('Maxim', 'Ignatiev', '777', 'my@gmail.com', 41)";
        executeSql(insertContact4);
    }

    @Test
    public void shouldInsertContact() throws DaoException {
        List<ContactDto> beforeInsert = contactDao.findAll();
        ContactDto contactDto = ContactDto.builder()
                .firstName("Ivan")
                .lastName("Sidorov")
                .email("no@mail.ru")
                .phone("123")
                .userId(15)
                .build();
        contactDao.save(contactDto);
        List<ContactDto> afterInsert = contactDao.findAll();
        Assert.assertEquals(1, afterInsert.size() - beforeInsert.size());
    }

    @Test
    public void shouldRemove() throws DaoException {
        List<ContactDto> beforeRemove = contactDao.findAll();
        contactDao.delete(2L);
        List<ContactDto> afterRemove = contactDao.findAll();
        Assert.assertEquals(1, beforeRemove.size() - afterRemove.size());
    }

    @Test
    public void shouldFindAllUserContacts() throws ContactDaoException {
        List<ContactDto> userContacts = contactDao.findUserContacts(15L);
        Assert.assertEquals(2, userContacts.size());
    }

    @Test
    public void shouldFindByEmail() throws ContactDaoException {
        Optional<ContactDto> foundByEmail = contactDao.findByEmail("my@gmail.com");
        Assert.assertTrue(foundByEmail.isPresent());
    }

    private void executeSql(String sql) throws SQLException {
        PreparedStatement statement = connection.prepareStatement(sql);
        statement.executeUpdate();
        statement.close();
    }

    private Connection createConnectionProxy(Connection realConnection) {
        return (Connection) Proxy.newProxyInstance(getClass().getClassLoader(), new Class[]{Connection.class},
                (proxy, method, args) -> {
                    if (method.getName().equals("close")) {
                        return null;
                    } else {
                        return method.invoke(realConnection, args);
                    }
                });
    }

    @After
    public void dropTable() throws SQLException {
        String sql = "drop table user_contact";
        executeSql(sql);
    }
}
